Label,Feature1,Feature2
area-System.Xml,Some XPath.XDocument tests are failing,Some XPath.XDocument queries have different results than other XPath navigators. This might be an old behavior or newly introduced bug.  Failing tests: build /p=IncludeTraits=ActiveIssue=17 
area-System.Xml,2 XPath.XDocument tests fail because of lacking feature,"XPath.XDocument navigator doesn't support MoveToId(string).  Verify if this was ever supported. If it was, verify if we want to support it in the future. If it wasn't move the tests to a different file and remove them from XPath.XDocument.Tests project.  Failing tests: NodeSetFunctionsTest2267 MatchesTest2352  <!--- @huboard:{""order"":20.0,""milestone_order"":20,""custom_state"":""""} --> "
area-System.Numerics,Two Numerics Tests are failing only on our CI server,"Two of the tests in our System.Numerics.Vectors suite are failing only on our CI build server, and potentially only intermittently:  Vector2NormalizeTest1 Vector4NormalizeTest2  Given that these are very similar to other tests which cover a similar edge-case (especially the Vector3 normalization tests, which aren't failing), we will need to investigate why these tests in particular are failing on our build server. This may have been a point-in-time issue as we brought up our build infrastructure, and may not re-surface again. "
area-System.Numerics,SIMD test failures on non-ENU configurations.,"After pulling both of @adamralph 's pull requests #31 and #32, I'm continuing to see test failures for SIMD on a DEU (German) test environment.  Here's a representative error: d:\oss\corefx\src\System.Numerics.Vectors\tests\GenericVectorTests.cs(545): error : System.Numerics.Tests.GenericVe ctorTests.ToStringCurrencySByte: Assert.Equal() Failure\r\nPosition: First difference is at position 8\r\nExpected:  <97,00 ?, -108,00 ?, 22,00 ?, 29,00 ?, 49,00 ?, 60,00 ?, 103,00 ?, 58,00 ?, -62,00 ?, -124,00 ?, -117,00 ?, 48,00 ?, 15,00 ?, -35,00 ?, -13,00 ?, -34,00 ?>\r\nActual:   <97,00 ?. -108,00 ?. 22,00 ?. 29,00 ?. 49,00 ?. 60,00 ?. 103 ,00 ?. 58,00 ?. -62,00 ?. -124,00 ?. -117,00 ?. 48,00 ?. 15,00 ?. -35,00 ?. -13,00 ?. -34,00 ?> [D:\oss\corefx\bin\ tools\fxbuild.proj]  Observe that expected separates elements with a comma, actual separates elements with a dot. "
area-System.Numerics,Quaternion operator overloads should be using the respective methods,"Quaternion declares a handful of methods to perform addition, subtraction and multiplication, and provides the respective overloads for these operations.  However, instead of re-using the `Add`, `Multiply` etc. methods, the code is re-written in the operator overloads. The operators should be using their respective methods rather than re-declaring the same code.  This is under the assumption that the JIT inlines the methods when they are used in the operator overloads. "
area-Infrastructure,Add Linux/Mac build script,A `build.sh` should be added alongside `build.cmd` to build corefx on Linux/Mac. 
area-System.Numerics,Made Quarternion's operator overloads use their respective methods,"Operator overloads of Quaternion now utilize their respective methods, and removed redundant ""this"" qualifiers in Quaternion constructor. "
area-Meta,ReferenceSource repo license incorrect for individual files,"some of the files I looked up, it has header comment with Apache 2.0 license. which license should apply for those files? MIT or Apache 2.0 "
area-System.Xml,"Remove always true ""if"" and unreachable code in System.Xml.Linq.XObject.SkipNotify method.","This: if (o.Annotations<XObjectChangeAnnotation>() != null)  is always true because the above while can finish only in two conditions: when o != null or when o.annotations == null. The first condition will be catched by "" if (o == null)"" and if the second one is true, ""o.Annotations<XObjectChangeAnnotation>() != null"" will also always be true i think. "
area-System.Xml,[Issue 54] Removed always-true if and unreachable code in XObject.cs,Removed always-true if and unreachable code in XObject.cs 
area-System.Xml,"System.Xml.sln fails to build on Mono, error CS0433","**I know that cross-platform support is coming later, I just thought it might make sense to document this here in case someone else tries the same**  Building System.Xml.sln with xbuild on Mono doesn't work (the other solutions build fine), it throws the following errors:  ``` Build FAILED. Errors:  /home/alexander/dev/corefx/src/System.Xml.sln (default targets) -> (Build target) -> /home/alexander/dev/corefx/src/System.Xml.XPath.XDocument/System.Xml.XPath.XDocument.csproj (default targets) -> /usr/lib/mono/4.5/Microsoft.CSharp.targets (CoreCompile target) ->      System/Xml/XPath/XAttributeExtensions.cs(10,56): error CS0433: The imported type `System.Xml.Linq.XAttribute' is defined multiple times     System/Xml/XPath/XAttributeExtensions.cs(10,78): error CS0433: The imported type `System.Xml.Linq.XNamespace' is defined multiple times     System/Xml/XPath/XDocumentExtensions.cs(22,61): error CS0433: The imported type `System.Xml.Linq.XNode' is defined multiple times     System/Xml/XPath/XObjectExtensions.cs(10,23): error CS0433: The imported type `System.Xml.Linq.XContainer' is defined multiple times     System/Xml/XPath/XObjectExtensions.cs(10,49): error CS0433: The imported type `System.Xml.Linq.XObject' is defined multiple times     System/Xml/XPath/XNodeNavigator.cs(48,9): error CS0433: The imported type `System.Xml.Linq.XElement' is defined multiple times     System/Xml/XPath/XNodeNavigator.cs(784,35): error CS0433: The imported type `System.Xml.Linq.XText' is defined multiple times ```  It looks like it runs into a conflict with the System.Xml.Linq library in the Mono GAC. Needs further investigation. "
area-Infrastructure,build.cmd does not build solution on HP laptop (when Platform=MCD is pre-set),"I've got HP laptop with windows 7. When I run build.cmd, I've got the error ""configuration is invalid""  ``` C:\Projects\dotnet\corefx>build.cmd C:\Projects\dotnet\corefx\src\System.Collections.Immutable.sln.metaproj : error MSB4126: указанная конфигурация решения ""Release|MCD"" недопустима. Укажите допустимую конфигурац ию решения с помощью свойств Configuration и Platform (например, MSBuild.exe Solution.sln /p:Configuration=Debug /p:Platform=""Any CPU"") или оставьте эти свойства пустыми, чтобы использовать конфигурацию решения по умолчанию. [C:\Projects\dotnet\corefx\src\System.Collections.Immutable.sln] ```  The reason of this error is that environment variable `Platform` is set to `MCD` on the laptop by default. I have to change build command in the build.cmd by adding `/p:Platform=""Any CPU""` to compile the project.  Build script should check for allowed platforms and generate user-friendly error message, which says what to do to successfully compile the project when the platform is not supported.  "
area-Meta,"Hello, World! sample","Feature request: please add ""Hello, World!"" sample, which shows how to use .NET Core with user applications. "
area-System.Numerics,Behaviour of `Quaternion.CreateFromAxisAngle` when axis is not a unit vector,"The resulting quaternion depends on the length of `axis`. This does not describe a rotation and thus does not match the documentation.  There are a few ways to handle this issue: 1. Normalize `axis`, but this incurs a performance hit 2. Add a precondition that `axis.Length()` ≈ 1.        But enforcing that pre-condition is about as expensive as 1), so it'd probably need to be a documentation-only precondition. Unfortunately this means that consumers will rely on the current behaviour even if it's undocumented, so I don't think that this is a good solution. 3. Document the current behaviour  ---  Just for convenience, the relevant source code:  ``` /// <summary> /// Creates a Quaternion from a vector and an angle to rotate about the vector. /// </summary> /// <param name=""axis"">The vector to rotate around.</param> /// <param name=""angle"">The angle, in radians, to rotate around the vector.</param> /// <returns>The created Quaternion.</returns> public static Quaternion CreateFromAxisAngle(Vector3 axis, float angle) {     Quaternion ans;      float halfAngle = angle * 0.5f;     float s = (float)Math.Sin(halfAngle);     float c = (float)Math.Cos(halfAngle);      ans.X = axis.X * s;     ans.Y = axis.Y * s;     ans.Z = axis.Z * s;     ans.W = c;      return ans; } ``` "
area-System.Numerics,`Equals` with NaN values (IEEE vs. reflexivity),"The built in floating point types compare `NaN` as unequal when using `==` and `!=` (following IEEE semantics) but compare it as equal when using the `Equals` method.  Your floating point based types currently use IEEE semantics even for `Equals`. I suggest using the same behaviour as the built in types in your floating point based types like vectors or quaternions.  The  MSDN documentation of `Equals` contains an exception that allows `A.Equals(A)` to return false on floating point types, so you don't strictly violate its contract. But returning false still breaks hash tables and does not match the behaviour of the built in types, so I consider it a bad idea.  This can be avoided by calling `Equals` on the members instead of `==` in the implementation of `Equals` but not in `==` and `!=`.  For example with quaternion,  replace  ``` public bool Equals(Quaternion other) {     return (X == other.X &&             Y == other.Y &&             Z == other.Z &&             W == other.W); } ```  with  ``` public bool Equals(Quaternion other) {     return (X.Equals(other.X) &&             Y.Equals(other.Y) &&             Z.Equals(other.Z) &&             W.Equals(other.W)); } ```  You might want to add tests that check that `==` and `!=` compare all the above cases as unequal, so that they match the IEEE specification.  Replace:  ``` // Counterintuitive result - IEEE rules for NaN comparison are weird! Assert.False(a.Equals(a)); Assert.False(b.Equals(b)); Assert.False(c.Equals(c)); Assert.False(d.Equals(d)); ```  with:  ``` // Equals does not follow IEEE semantics since many consumers rely on equality being reflexive. // This includes collections like `Dictionary<K,V>` or `HashSet<T>` Assert.True(a.Equals(a)); Assert.True(b.Equals(b)); Assert.True(c.Equals(c)); Assert.True(d.Equals(d));  // Counterintuitive result - IEEE rules for NaN comparison are weird! Assert.False(a == a); Assert.False(b == b); Assert.False(c == c); Assert.False(d == d);  Assert.True(a != a); Assert.True(b != b); Assert.True(c != c); Assert.True(d != d); ``` "
area-System.Xml,Some Xml encoding tests lost their encoding,Some of Xml tests were testing problematic characters in different Encoding (like Russian characters). At some point few years back the encoding was lost while moving between different repos. Tests pass because .cs files lost their encoding too. Tests need to be rewritten since there is no trace of original copy 
area-System.Xml,Add test coverage for XPath and XDocument,"- Adding test coverage for XPath implementations (XPath.XPathDocument, XPath.XmlDocument, XPath.XDocument) - Adding some tests for XDocument (more coming later) "
area-Meta,Necessary bits for Mono.Posix,I tried to build [Mono.Posix](https://github.com/mono/mono/tree/master/mcs/class/Mono.Posix) against aspnetcore50 and found a lot of API that mono uses to be missing from .NET Core most prominently in the Interop-domain (like CustomMarshaler).  Please add Mono.Posix to your list of scenarios that can benefit from the API surface of .NET Core. 
